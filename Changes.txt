Зміни, внесені до програми в порівнянні з її початковим станом:

1. Додано модульні тести (SplayTreeTests.cpp):
Перевірено роботу методів вставки, видалення та пошуку з цілими числами за допомогою фреймворка Catch2.

2. Створено узагальнення для SplayTree - BinarySearchTree:
  - переміщено корінь поля типу Node* з класу SplayTree в захищений розділ класу BinarySeacrhTree;
  - переміщені методи мінімум, максимум, попередник, наступник, zig, searchUtility, print, search;
  з класу SplayTree до захищеного розділу класу BinarySeacrhTree;
  від класу SplayTree до захищеного розділу класу BinarySeacrhTree;
  - перейменовано метод zig для обертання;
  - перейменовано метод searchUtility на батьківський пошук;
  - перейменовано метод пошуку на search_;
  - переміщено вузол структури з класу SplayTree в захищений розділ класу BinarySeacrhTree;
  - реалізовано публічний геттер getRoot() для кореня поля класу BinarySearchTree;
  - реалізовані публічні віртуальні методи пошуку, вставки, видалення та друку.
  
3. Успадкований клас SplayTree від класу BinarySearchTree:
  - виправлена ​​помилка в методі split (тепер, якщо вузол з потрібним ключем не знайдено, pivot стає його наступником або попередником);
  - методи вставки, видалення, пошуку тепер перевизначають відповідні методи класу BinarySearchTree;
  - виклик методу zig у методі splay замінено на відповідний метод rotate класу BinarySearchTree;
  - метод пошуку тепер повертає об'єкт лише для читання типу Node;
  - Node* toBeInserted було перейменовано на Node*, вставлене в метод вставки;
  - методи insert і search_ класу BinarySearchTree тепер використовуються у відповідному методі класу SplayTree;
  - прокоментував рядок, який відповідав за друк повідомлення про те, що ключ не знайдено в методі remove,
  тому що він заповнював консоль;
  - перейменовано Node* toBeDeleted на Node* toBeRemoved у методі remove;
  - замінено всі виклики кореневого поля на виклики відповідного поля класу BinarySearchTree;
  - замінено виклик методу searchUtility на виклик методу search_ класу BinarySearchTree;
  
4. main.cpp:
  - реалізована функція testBinarySearchTree() для демонстрації роботи класу BinarySearchTree;
  - реалізовано функцію printExampleForCatch2UnitTest() для print() екземпляра класу SplayTree, який
  використовується для перевірки роботи методів вставки, видалення та пошуку класу SplayTree у SplayTreeTests.cpp;
  - додано виклики функцій testBinarySearchTree() і printExampleForCatch2UnitTest() у функцію main();
  - прокоментовані виклики функцій testInt(), testMyData(), testBinarySearchTree(), printExampleForCatch2UnitTest(),
  щоб вони не заливали вихід, коли він не потрібен;
  - додано два аргументи - int argc, char* argv[] до оголошення функції main();
  - функція main() тепер повертає Catch::Session().run(argc, argv), щоб запустити модульні тести, записані за допомогою
  допомога фреймворку Catch2.
  
5. Зміни, які були зроблені під час першої ітерації написання програми (від нуля до того, що називається
початковий стан у контексті цієї лабораторної роботи) і є досить значущими, щоб згадати:
  - класична реалізація Splay Tree (https://en.wikipedia.org/wiki/Splay_tree) була покращена шляхом заміни
  методи Zig, Zig-Zig і Zig-Zag з одним методом (zig в контексті початкового стану або обертання в контексті
  кінцевого стану програми), який обертає вузол ліворуч чи праворуч залежно від того, чи є він відповідно правим чи лівим
  дитина свого батька;